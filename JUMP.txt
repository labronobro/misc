extends RigidBody


export var counter = 0;
export var lengthray = 20;
export var timer = 0;
export var sensitivityview = 0.3;

export var accellerationmax = 0.02;
export var accellerationair = 0.01;
export var speedwalk = 5;
export var speedjump = 3;

var is_moving = false
var timer = 0
var health = 100
var stamina = 1000
var raylength = 10

#поведение камеры + мышь
func _input(inptevnt):
	if inptevnt.type == InputEvent.MOUSE_MOTION:
		var yo = rad2deg(get_node("body").get_rotation().y);
		var pt4 = rad2deg(get_node("body/camera").get_rotation().x);
		
		yo = fmod(yo - inptevnt.relative_x * sensitivityview, 360);
		pt4 = max(min(pt4 - inptevnt.relative_y * sensitivityview, 90), -90);
		
		get_node("body").set_rotation(Vector3(0, deg2rad(yo), 0));
		get_node("body/camera").set_rotation(Vector3(deg2rad(pt4), 0, 0));

#[	
#	if inptevnt.type == InputEvent.MOUSE_BUTTON and inptevnt.pressed and inptevnt.button_index==1:
#		shoot(inptevnt)

#удалить его чтоли потом?
#func shoot(inptevnt):
#		get_node("body/camera/shotsound").play("blop")
#]


func _fixed_process(delta):
	get_node("Stamina").set_value(stamina)
	timer += 1

	if timer >= 8:
		timer = 0

	if Input.is_action_pressed("attack") and timer == 0:
		get_node("body/camera/shotsound").play("blop")
	
	is_moving = false










func _integrate_forces(playerstate):
	
	var lookat = get_node("body").get_global_transform().basis;
	var dirto = Vector3();
	
	if Input.is_key_pressed(KEY_W):
		dirto -= lookat[2];
	if Input.is_key_pressed(KEY_S):
		dirto += lookat[2];
	if Input.is_key_pressed(KEY_A):
		dirto -= lookat[0];
	if Input.is_key_pressed(KEY_D):
		dirto += lookat[0];
		#в движении
		is_moving = true
	dirto = dirto.normalized();

	#лучь
	var ray = get_node("ray");

		# увеличить скорость хотьбы и высоту прыжка когда бежишь и стамина больше нуля:
	if Input.is_action_pressed("run") and is_moving and ray.is_colliding() and stamina > 0:
		speedwalk *= 1.4
		speedjump *= 1.2
		stamina -= 15





	if ray.is_colliding():
		var up = playerstate.get_total_gravity().normalized();
		var normal = ray.get_collision_normal();
		var velfl = Vector3();
		#луч-столкновение
		var object = ray.get_collider()
		
		var speed = speedwalk;
		var difference = velfl + dirto * speedwalk - playerstate.get_linear_velocity();
		var vdifference = lookat[1] * difference.dot(lookat[1]);
		difference -= vdifference;
		difference = difference.normalized() * clamp(difference.length(), 0, accellerationmax / playerstate.get_step());
		difference += vdifference;
		apply_impulse(Vector3(), difference * get_mass());

		if object extends RigidBody or object extends StaticBody:
			var point = ray.get_collision_point() - object.get_translation()
			var floor_angular_vel = Vector3()
			if object extends RigidBody:
				velfl = object.get_linear_velocity()
				floor_angular_vel = object.get_angular_velocity()
			elif object extends StaticBody:
				velfl = object.get_constant_linear_velocity()
				floor_angular_vel = object.get_constant_angular_velocity()



			# to convert Euler angles to a 3x3 matrix
			var transform = Matrix3(Vector3(1, 0, 0), floor_angular_vel.x)
			transform = transform.rotated(Vector3(0, 1, 0), floor_angular_vel.y)
			transform = transform.rotated(Vector3(0, 0, 1), floor_angular_vel.z)
			velfl += transform.xform_inv(point) - point
			yo = fmod(yo + rad2deg(floor_angular_vel.y) * playerstate.get_step(), 360)
			get_node("body").set_rotation(Vector3(0, deg2rad(yo), 0))

		var diff = velfl + dirto * speedwalk - playerstate.get_linear_velocity()
		var vertdiff = lookat[1] * diff.dot(lookat[1])
		diff -= vertdiff
		diff = diff.normalized() * clamp(diff.length(), 0, accellerationmax / playerstate.get_step())
		diff += vertdiff

		apply_impulse(Vector3(), diff * get_mass())

		# Regenerate stamina:
		stamina += 5

#		if Input.is_action_pressed("jump") and stamina > 150:
#			apply_impulse(Vector3(), normal * jump_speed * get_mass())
#			get_node("Sounds").play("jump")
#			stamina -= 150


		
		if Input.is_key_pressed(KEY_SPACE) and stamina > 150:
			apply_impulse(Vector3(), Vector3(0,1,0) * speedjump * get_mass());
			get_node("body/camera/shotsound").play("jump")
			stamina -= 150


	else:
		apply_impulse(Vector3(), dirto * accellerationair * get_mass());
	playerstate.integrate_forces();

		# Cap stamina:
	if stamina >= 1000:
		stamina = 1000
	if stamina <= 0:
		stamina = 0


func _ready():
	set_process_input(true);

func _enter_tree():
	Input.set_mouse_mode(Input.MOUSE_MODE_CAPTURED);

func _exit_tree():
	Input.set_mouse_mode(Input.MOUSE_MODE_VISIBLE);
